from getData import *
import sys
from GameSceneObjects import GameObject, Item




class CraftingWindow():
    def __init__(self, screen, hotbar, KH, player):
        self.openWindow = False
        self.x = -112
        self.y = 0
        self.outline = loadImage("images/CraftingWindowOutline2.png")
        self.fill = loadImage("images/CraftingWindowFill2.png")
        self.text = loadImage("images/CraftingWindowText.png")
        self.screen = screen
        self.KH = KH
        self.player = player

        self.screenObjOutline = -1
        self.screenObjFill = -1
        self.screenObjText = -1

        self.itemSprites = Item.itemSprites
        self.itemSpriteHighlights = Item.itemSpriteHighlights
        self.itemData = Item.ItemData
        
        self.noTableItems = [] #The array that is used if there are no engineering tables nearby to the player
        
        for i in range(len(self.itemData)): #It is generated by looking at the item.json data for a "tableRequired" variable for each item id
            if self.itemData[str(i+1)]["tableRequired"] == False:
                self.noTableItems.append(str(i+1))
        
        self.listToUse = self.itemData
        
        self.screenObjects = [] #Variable amount of screen objects

        self.currentCostWindow = None #The window that displays the cost of the hovers object
        self.toDoCrafting = False
        self.yMax = (len(self.itemSprites) - 10) * -44 #The maximum y that can be scrolled to. 


    def display(self):#Displays the window if it is on screen
        self.screen.canv.delete(self.screenObjFill, self.screenObjOutline, self.screenObjText)
        if self.x >= -112:
            self.screenObjFill = self.screen.canv.create_image(self.x, self.screen.height - 253, image = self.fill)
            self.screenObjOutline = self.screen.canv.create_image(self.x, self.screen.height - 253, image = self.outline)
   
            self.displayRecipes()
            self.screenObjText = self.screen.canv.create_image(self.x - 16, self.screen.height - 463, image = self.text)
             
    def displayRecipes(self): #Displays the item and name for each possible item
        for i in self.screenObjects:
            self.screen.canv.delete(i)
        self.screenObjects = []
        
        if self.player.nearTable == True:
            self.listToUse = self.itemData.copy() #If near table, copies full list
            self.yMax = (len(self.itemSprites) - 10) * -44
        else:
            self.listToUse = self.noTableItems.copy() #Otherwise copies smaller list
            self.yMax = 0
        
        if not self.player.nearWires: #If not near a electric station, then the wires option gets removed, this is why copying it is important
            if type(self.listToUse) == dict:
                self.listToUse.pop("14", None)
            
            else:
                self.listToUse.remove("14")

        for i in self.listToUse: #Starting at 416 from the bottom of the screen, the procedure displays the icon and the name of the object. It then binds functions to each item
            if type(self.listToUse) == dict:
                y = self.screen.height - 460 + self.y + 44*int(i)
            else:
                y = self.screen.height - 460 + self.y + 44*(self.listToUse.index(i) + 1)
            if y > self.screen.height - 462:
                self.screenObjects.append(self.screen.canv.create_image(self.x - 86, y, image = self.itemSprites[int(i) - 1], activeimage = self.itemSpriteHighlights[int(i) - 1]))
                self.screen.canv.tag_bind(self.screenObjects[-1], "<Enter>", self.setCostWindow) #when mouse starts to hover over the item
                self.screen.canv.tag_bind(self.screenObjects[-1], "<Leave>", self.resetCostWindow) #When mouse stops hovering
                self.screen.canv.tag_bind(self.screenObjects[-1], "<Button-1>", self.initCraftItem)
                
                self.screenObjects.append(self.screen.canv.create_text(self.x, y, text = self.itemData[i]["name"]))

    def setCostWindow(self, event): #Sets the cost to display to a function which is then taken by a function on the main thread
        y = event.y
        y -= (self.screen.height - 440 + self.y)
        indexY = y//44 + 1
        if type(self.listToUse) == dict:
            self.currentCostWindow = self.itemData[str(indexY)]["cost"]
        else:
            self.currentCostWindow = self.itemData[str(self.listToUse[indexY - 1])]["cost"]
    
    def resetCostWindow(self, event):
        self.currentCostWindow = None

    def initCraftItem(self, event): #Finds which item is to be crafted based on where the mouse was clicked
        y = event.y - self.y #self.y is changed by scrolling so it has to be accounted for
        y -= (self.screen.height - 428)
        indexY = y//44 + 1
        if type(self.listToUse) == dict: #If dict, just give the index value as it will be the full list anyway and it can be accessed easier through key
            self.toDoCrafting = indexY
        else:
            self.toDoCrafting = int(self.listToUse[indexY - 1]) #If list, then the find the value at the current index.
    
    def changeY(self, event): #Changes the self.y variable based on the direction of scrolling, limiting to 0 and yMax
        
        if sys.platform == "linux":
            if event.num == 4:
                self.y += 3
            else:
                self.y -= 3
        
        else:
            self.y += event.delta
        
        if self.y >0:
            self.y = 0
        
        elif self.y < self.yMax:
            self.y = self.yMax
            

    def isMouseInWindow(self): #If the window is on screen, checks to see if the mouse is which the coordinates of the window
        x = self.KH.mouseX
        y = self.KH.mouseY

        if self.x > -112:
            if 0 <= x <= self.x + 112:
                if self.screen.height - 512 <= y <= self.screen.height:
                    return True
        
        return False


class Hotbar(GameObject):
    def __init__(self, screen, itemSprites):
        
        x = screen.width/2
        y = screen.height - 25
        hotbarSprite = loadImage("images/UI/Hotbar.png")
        super().__init__(x, y, "UI", 0, hotbarSprite, screen, None)
        self.cursorSprite = loadImage("images/UI/cursor.png")
        self.cursorPosition = 1 #Which slot the cursor is in
        self.cursorScreenObj = -1
        self.inventory = [0] * 6
        self.invScreenObj = [-1]*6 
        self.lockCursor = False #If this is true, the cursor will not change positions

        self.itemFrame = 0
        self.itemName = -1 #The text canvas object that displays the item name

        screen.root.bind("<KeyPress>", self.changeCursorPosition)
    
    def display(self):# Displays 6-slot hotbar, the cursor, and each item in the inventory
        self.screen.canv.delete(self.screenObj, self.cursorScreenObj)

        self.screenObj = self.screen.canv.create_image(self.x, self.y, image = self.sprite)
        self.cursorScreenObj = self.screen.canv.create_image(self.x - 133 + 38*self.cursorPosition, self.y, image = self.cursorSprite)

        for i in self.inventory:
            if i != 0:
                self.screen.canv.delete(i.screenObj)
                i.screenObj = self.screen.canv.create_image(self.x - 133 + 38*(self.inventory.index(i)+1),self.y, image = i.sprite)
    
    def changeCursorPosition(self, event): #if not locked, the cursor will be set to the slot signified by the number
        if not self.lockCursor:
            if event.keysym in ['1','2','3','4','5','6']:
                self.cursorPosition = int(event.keysym)
                self.itemFrame = 0
    
    def addItem(self, id, item = None): #It looks to see if there any free slot (0 in the inventory) in the hotbar. If there is, it adds the item to the hotbar and returns True, otherwise it returns False
        try:
            index = self.inventory.index(0)
            if self.cursorPosition - 1 == index:
                self.itemFrame = 0

            if id == None: #This is if the item is already created, and you just want to move it around (between chest and player)
                self.inventory[self.inventory.index(0)] = item
            else: #Otherwise this attempts to create a new Item object
                self.inventory[self.inventory.index(0)] = Item(id, 100)
            return True
        except ValueError:
            return False
    
    def changeCursorPositionScroll(self,event): #Each time the scroll event triggers, the cursor move one slot in a direction depending on the direction
        if sys.platform == "linux":
            if event.num == 4:
                delta = 1
            else:
                delta = -1
        
        else:
            delta = event.delta
        
        if not self.lockCursor:
            if delta < 0:
                self.cursorPosition = (self.cursorPosition + 1) % 7
                if self.cursorPosition == 0:
                    self.cursorPosition = 1

            
            else:
                self.cursorPosition = self.cursorPosition - 1
                if self.cursorPosition < 1:
                    self.cursorPosition = 6
            
            self.itemFrame = 0